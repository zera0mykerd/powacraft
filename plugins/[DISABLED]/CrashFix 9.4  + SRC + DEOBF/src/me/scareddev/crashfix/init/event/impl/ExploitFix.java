/*
 * Decompiled with CFR 0.150.
 * 
 * Could not load the following classes:
 *  io.netty.channel.Channel
 *  org.bukkit.Location
 *  org.bukkit.Material
 *  org.bukkit.craftbukkit.v1_8_R3.entity.CraftPlayer
 *  org.bukkit.entity.Item
 *  org.bukkit.entity.Player
 *  org.bukkit.event.EventHandler
 *  org.bukkit.event.EventPriority
 *  org.bukkit.event.block.Action
 *  org.bukkit.event.block.SignChangeEvent
 *  org.bukkit.event.entity.FoodLevelChangeEvent
 *  org.bukkit.event.inventory.InventoryCreativeEvent
 *  org.bukkit.event.player.PlayerCommandPreprocessEvent
 *  org.bukkit.event.player.PlayerEditBookEvent
 *  org.bukkit.event.player.PlayerInteractEvent
 *  org.bukkit.event.player.PlayerMoveEvent
 *  org.bukkit.event.player.PlayerPickupItemEvent
 *  org.bukkit.event.player.PlayerQuitEvent
 *  org.bukkit.inventory.ItemStack
 */
package me.scareddev.crashfix.init.event.impl;

import io.netty.channel.Channel;
import java.util.HashMap;
import java.util.Map;
import me.scareddev.crashfix.CrashFix;
import me.scareddev.crashfix.init.event.CrashFixListener;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.craftbukkit.v1_8_R3.entity.CraftPlayer;
import org.bukkit.entity.Item;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.SignChangeEvent;
import org.bukkit.event.entity.FoodLevelChangeEvent;
import org.bukkit.event.inventory.InventoryCreativeEvent;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerEditBookEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerPickupItemEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.ItemStack;

public class ExploitFix
extends CrashFixListener {
    private final /* synthetic */ Map<Player, Long> LastFoods;
    private final /* synthetic */ Map<Player, Long> Delay;
    private final /* synthetic */ Map<Player, Long> Foods;

    @EventHandler
    public void onFoodLevelChange(FoodLevelChangeEvent foodLevelChangeEvent) {
        Player player = (Player)foodLevelChangeEvent.getEntity();
        if (foodLevelChangeEvent.getFoodLevel() > player.getFoodLevel()) {
            if (!this.Foods.containsKey((Object)player)) {
                this.Foods.put(player, 0L);
            }
            if (!this.LastFoods.containsKey((Object)player)) {
                this.LastFoods.put(player, System.currentTimeMillis());
            }
            if (System.currentTimeMillis() - this.LastFoods.get((Object)player) >= 1200L) {
                this.LastFoods.replace(player, System.currentTimeMillis());
                this.Foods.put(player, 0L);
            } else {
                this.Foods.replace(player, this.Foods.get((Object)player) + 1L);
            }
            if (this.Foods.get((Object)player) > 1L) {
                foodLevelChangeEvent.setCancelled(true);
                foodLevelChangeEvent.setFoodLevel(20);
                foodLevelChangeEvent.setFoodLevel(player.getFoodLevel());
                CrashFix.getInstance().getExploitPlayer().kick(player, "FOOD_EXPLOIT", "Too many Eating in one Second!");
                return;
            }
            if (foodLevelChangeEvent.getFoodLevel() > 27) {
                CrashFix.getInstance().sendMessage(String.valueOf(new StringBuilder().append(CrashFix.getInstance().getColor()[0]).append(player.getName()).append(CrashFix.getInstance().getColor()[1]).append(" wan't to eat but FoodLevel too High!")));
                foodLevelChangeEvent.setCancelled(true);
                foodLevelChangeEvent.setFoodLevel(player.getFoodLevel());
            }
        }
    }

    @EventHandler
    public void onSignEdit(SignChangeEvent signChangeEvent) {
        Player player = signChangeEvent.getPlayer();
        for (int i = 0; i < 4; ++i) {
            if (signChangeEvent.getLine(i).length() <= 47) continue;
            signChangeEvent.setCancelled(true);
            CrashFix.getInstance().getExploitPlayer().kick(player, "SIGN_EXPLOIT", "Too many Characters");
            return;
        }
    }

    @EventHandler
    public void onPickUp(PlayerPickupItemEvent playerPickupItemEvent) {
        Player player = playerPickupItemEvent.getPlayer();
        Item item = playerPickupItemEvent.getItem();
        if (item == null) {
            return;
        }
        if (item.getPickupDelay() > 0) {
            playerPickupItemEvent.setCancelled(true);
            item.remove();
            CrashFix.getInstance().getExploitPlayer().kick(player, "PICK_UP", "Invalid Delay");
            return;
        }
        if (item.getLocation() == null) {
            playerPickupItemEvent.setCancelled(true);
            item.remove();
            CrashFix.getInstance().getExploitPlayer().kick(player, "PICK_UP", "Invalid Item Location");
            return;
        }
        if (item.getItemStack().getAmount() > 64 || item.getItemStack().getAmount() < 0) {
            playerPickupItemEvent.setCancelled(true);
            item.remove();
            CrashFix.getInstance().getExploitPlayer().kick(player, "PICK_UP", "Invalid Item Amount");
        }
    }

    @EventHandler
    public void onChat(PlayerCommandPreprocessEvent playerCommandPreprocessEvent) {
        if (playerCommandPreprocessEvent.getPlayer().hasPermission("crashfix.bypass")) {
            return;
        }
        boolean bl = false;
        String string = playerCommandPreprocessEvent.getMessage();
        for (char c : string.toCharArray()) {
            if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == ':' || c == ',' || c == '_' || c == '.' || c == '\u00b3' || c == '\u00b2' || c == '\'' || c == '*' || c == '+' || c == '~' || c == '-' || c == '|' || c == '>' || c == '<' || c == '^' || c == '?' || c == '=' || c == ')' || c == '(' || c == '%' || c == '$' || c == '\"' || c == '!' || c == '&' || c == ' ' || c == '/' || c == '\u00fc' || c == '\u00f6' || c == '\u00e4' || c == '_' || c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == '0' || c == '#') continue;
            playerCommandPreprocessEvent.setCancelled(true);
            bl = true;
        }
        if (bl) {
            playerCommandPreprocessEvent.getPlayer().sendMessage(String.valueOf(new StringBuilder().append(CrashFix.getInstance().getPrefix()).append("Please use a-Z / 0 - 9 Characters")));
            CrashFix.getInstance().sendMessage(String.valueOf(new StringBuilder().append(CrashFix.getInstance().getColor()[1]).append("The Player \u00a74").append(playerCommandPreprocessEvent.getPlayer().getName()).append(CrashFix.getInstance().getColor()[1]).append(" tried to use invalid Characters in Commands!")));
            playerCommandPreprocessEvent.setCancelled(true);
        }
    }

    @EventHandler(priority=EventPriority.LOWEST)
    public void onInteract(PlayerInteractEvent playerInteractEvent) {
        Player player = playerInteractEvent.getPlayer();
        Action action = playerInteractEvent.getAction();
        ItemStack itemStack = playerInteractEvent.getItem();
        if (action == null || itemStack == null) {
            return;
        }
        if ((action == Action.RIGHT_CLICK_AIR || action == Action.RIGHT_CLICK_BLOCK) && player.getItemInHand().getType() == Material.FISHING_ROD) {
            if (this.Delay.containsKey((Object)player) && this.Delay.get((Object)player) > System.currentTimeMillis()) {
                CrashFix.getInstance().sendMessage(String.valueOf(new StringBuilder().append(CrashFix.getInstance().getColor()[1]).append(" The Player ").append(CrashFix.getInstance().getColor()[0]).append(player.getName()).append(CrashFix.getInstance().getColor()[1]).append(" using FishingRod too fast!")));
                playerInteractEvent.setCancelled(true);
                return;
            }
            this.Delay.put(player, System.currentTimeMillis() + 22L);
        }
    }

    @EventHandler
    public void onMove(PlayerMoveEvent playerMoveEvent) {
        Player player = playerMoveEvent.getPlayer();
        if (!CrashFix.getInstance().getExploitPlayer().containsJoined(player) || player.getLastDamageCause() == null) {
            return;
        }
        CraftPlayer craftPlayer = (CraftPlayer)player;
        Channel channel = craftPlayer.getHandle().playerConnection.networkManager.channel;
        Location location = playerMoveEvent.getFrom();
        Location location2 = playerMoveEvent.getTo();
        if (playerMoveEvent.getFrom().distance(playerMoveEvent.getTo()) < 0.0) {
            player.teleport(playerMoveEvent.getFrom());
            CrashFix.getInstance().getExploitPlayer().kick(player, "MOVE_EXPLOIT", "Invalid Vector-D");
            channel.close();
            return;
        }
        if (playerMoveEvent.getFrom().distance(playerMoveEvent.getTo()) > 18.0) {
            player.teleport(playerMoveEvent.getFrom());
            CrashFix.getInstance().getExploitPlayer().kick(player, "MOVE_EXPLOIT", String.valueOf(new StringBuilder().append("O-D \u00a78(").append(CrashFix.getInstance().getColor()[1]).append((Object)playerMoveEvent.getFrom()).append("\u00a78)")));
            channel.close();
        }
    }

    @EventHandler(priority=EventPriority.LOW)
    public void onCreative(InventoryCreativeEvent inventoryCreativeEvent) {
        Player player = (Player)inventoryCreativeEvent.getWhoClicked();
        ItemStack itemStack = inventoryCreativeEvent.getCursor();
        if (itemStack == null) {
            return;
        }
        Material material = itemStack.getType();
        if (material == null) {
            return;
        }
        if (material.equals((Object)Material.WRITTEN_BOOK) || material.equals((Object)Material.ENCHANTED_BOOK) || material.equals((Object)Material.BANNER) || material.equals((Object)Material.GOLDEN_APPLE)) {
            return;
        }
        if (itemStack.hasItemMeta() && !player.hasPermission("anticrash.creative")) {
            player.sendMessage(String.valueOf(new StringBuilder().append(CrashFix.getInstance().getPrefix()).append("You dont have permissions to use this Item.")));
            player.sendMessage(String.valueOf(new StringBuilder().append(CrashFix.getInstance().getPrefix()).append("Permission: \u00a74anticrash.creative")));
            inventoryCreativeEvent.getCurrentItem().setType(Material.AIR);
            inventoryCreativeEvent.setCancelled(true);
        }
    }

    @EventHandler
    public void onQuit(PlayerQuitEvent playerQuitEvent) {
        Player player = playerQuitEvent.getPlayer();
        this.Delay.remove((Object)player);
        this.Foods.remove((Object)player);
        this.LastFoods.remove((Object)player);
        CrashFix.getInstance().getExploitPlayer().remove(player);
        CrashFix.getInstance().getExploitPlayer().removeJoin(player);
    }

    public ExploitFix() {
        this.Delay = new HashMap<Player, Long>();
        this.Foods = new HashMap<Player, Long>();
        this.LastFoods = new HashMap<Player, Long>();
    }

    @EventHandler(priority=EventPriority.HIGHEST)
    public void onBookEdit(PlayerEditBookEvent playerEditBookEvent) {
        Player player = playerEditBookEvent.getPlayer();
        if (!CrashFix.getInstance().Books()) {
            CrashFix.getInstance().getExploitPlayer().kick(player, "BOOK_EXPLOIT", "Books are Disabled!");
            playerEditBookEvent.setCancelled(true);
            return;
        }
        if (player.getItemInHand().getType() != Material.WRITTEN_BOOK && player.getItemInHand().getType() != Material.BOOK_AND_QUILL) {
            CrashFix.getInstance().getExploitPlayer().kick(player, "BOOK_EXPLOIT", "Edit Invalid Book!");
            playerEditBookEvent.setCancelled(true);
        }
    }
}

